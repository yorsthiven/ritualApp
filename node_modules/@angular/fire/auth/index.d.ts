import * as rxjs from 'rxjs';
import { Auth as Auth$1, applyActionCode as applyActionCode$1, beforeAuthStateChanged as beforeAuthStateChanged$1, checkActionCode as checkActionCode$1, confirmPasswordReset as confirmPasswordReset$1, connectAuthEmulator as connectAuthEmulator$1, createUserWithEmailAndPassword as createUserWithEmailAndPassword$1, deleteUser as deleteUser$1, fetchSignInMethodsForEmail as fetchSignInMethodsForEmail$1, getAdditionalUserInfo as getAdditionalUserInfo$1, getAuth as getAuth$1, getIdToken as getIdToken$1, getIdTokenResult as getIdTokenResult$1, getMultiFactorResolver as getMultiFactorResolver$1, getRedirectResult as getRedirectResult$1, initializeAuth as initializeAuth$1, initializeRecaptchaConfig as initializeRecaptchaConfig$1, isSignInWithEmailLink as isSignInWithEmailLink$1, linkWithCredential as linkWithCredential$1, linkWithPhoneNumber as linkWithPhoneNumber$1, linkWithPopup as linkWithPopup$1, linkWithRedirect as linkWithRedirect$1, onAuthStateChanged as onAuthStateChanged$1, onIdTokenChanged as onIdTokenChanged$1, parseActionCodeURL as parseActionCodeURL$1, reauthenticateWithCredential as reauthenticateWithCredential$1, reauthenticateWithPhoneNumber as reauthenticateWithPhoneNumber$1, reauthenticateWithPopup as reauthenticateWithPopup$1, reauthenticateWithRedirect as reauthenticateWithRedirect$1, reload as reload$1, revokeAccessToken as revokeAccessToken$1, sendEmailVerification as sendEmailVerification$1, sendPasswordResetEmail as sendPasswordResetEmail$1, sendSignInLinkToEmail as sendSignInLinkToEmail$1, setPersistence as setPersistence$1, signInAnonymously as signInAnonymously$1, signInWithCredential as signInWithCredential$1, signInWithCustomToken as signInWithCustomToken$1, signInWithEmailAndPassword as signInWithEmailAndPassword$1, signInWithEmailLink as signInWithEmailLink$1, signInWithPhoneNumber as signInWithPhoneNumber$1, signInWithPopup as signInWithPopup$1, signInWithRedirect as signInWithRedirect$1, signOut as signOut$1, unlink as unlink$1, updateCurrentUser as updateCurrentUser$1, updateEmail as updateEmail$1, updatePassword as updatePassword$1, updatePhoneNumber as updatePhoneNumber$1, updateProfile as updateProfile$1, useDeviceLanguage as useDeviceLanguage$1, validatePassword as validatePassword$1, verifyBeforeUpdateEmail as verifyBeforeUpdateEmail$1, verifyPasswordResetCode as verifyPasswordResetCode$1 } from 'firebase/auth';
export * from 'firebase/auth';
import * as i0 from '@angular/core';
import { Injector, EnvironmentProviders } from '@angular/core';
import { authState as authState$1, idToken as idToken$1, user as user$1 } from 'rxfire/auth';

interface Auth extends Auth$1 {
}
declare class Auth {
    constructor(auth: Auth$1);
}
interface AuthInstances extends Array<Auth$1> {
}
declare class AuthInstances {
    constructor();
}
declare const authInstance$: rxjs.Observable<Auth$1>;

declare class AuthModule {
    constructor();
    static ɵfac: i0.ɵɵFactoryDeclaration<AuthModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<AuthModule, never, never, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<AuthModule>;
}
declare function provideAuth(fn: (injector: Injector) => Auth$1, ...deps: any[]): EnvironmentProviders;

declare const authState: typeof authState$1;
declare const idToken: typeof idToken$1;
declare const user: typeof user$1;

declare const applyActionCode: typeof applyActionCode$1;
declare const beforeAuthStateChanged: typeof beforeAuthStateChanged$1;
declare const checkActionCode: typeof checkActionCode$1;
declare const confirmPasswordReset: typeof confirmPasswordReset$1;
declare const connectAuthEmulator: typeof connectAuthEmulator$1;
declare const createUserWithEmailAndPassword: typeof createUserWithEmailAndPassword$1;
declare const deleteUser: typeof deleteUser$1;
declare const fetchSignInMethodsForEmail: typeof fetchSignInMethodsForEmail$1;
declare const getAdditionalUserInfo: typeof getAdditionalUserInfo$1;
declare const getAuth: typeof getAuth$1;
declare const getIdToken: typeof getIdToken$1;
declare const getIdTokenResult: typeof getIdTokenResult$1;
declare const getMultiFactorResolver: typeof getMultiFactorResolver$1;
declare const getRedirectResult: typeof getRedirectResult$1;
declare const initializeAuth: typeof initializeAuth$1;
declare const initializeRecaptchaConfig: typeof initializeRecaptchaConfig$1;
declare const isSignInWithEmailLink: typeof isSignInWithEmailLink$1;
declare const linkWithCredential: typeof linkWithCredential$1;
declare const linkWithPhoneNumber: typeof linkWithPhoneNumber$1;
declare const linkWithPopup: typeof linkWithPopup$1;
declare const linkWithRedirect: typeof linkWithRedirect$1;
declare const onAuthStateChanged: typeof onAuthStateChanged$1;
declare const onIdTokenChanged: typeof onIdTokenChanged$1;
declare const parseActionCodeURL: typeof parseActionCodeURL$1;
declare const reauthenticateWithCredential: typeof reauthenticateWithCredential$1;
declare const reauthenticateWithPhoneNumber: typeof reauthenticateWithPhoneNumber$1;
declare const reauthenticateWithPopup: typeof reauthenticateWithPopup$1;
declare const reauthenticateWithRedirect: typeof reauthenticateWithRedirect$1;
declare const reload: typeof reload$1;
declare const revokeAccessToken: typeof revokeAccessToken$1;
declare const sendEmailVerification: typeof sendEmailVerification$1;
declare const sendPasswordResetEmail: typeof sendPasswordResetEmail$1;
declare const sendSignInLinkToEmail: typeof sendSignInLinkToEmail$1;
declare const setPersistence: typeof setPersistence$1;
declare const signInAnonymously: typeof signInAnonymously$1;
declare const signInWithCredential: typeof signInWithCredential$1;
declare const signInWithCustomToken: typeof signInWithCustomToken$1;
declare const signInWithEmailAndPassword: typeof signInWithEmailAndPassword$1;
declare const signInWithEmailLink: typeof signInWithEmailLink$1;
declare const signInWithPhoneNumber: typeof signInWithPhoneNumber$1;
declare const signInWithPopup: typeof signInWithPopup$1;
declare const signInWithRedirect: typeof signInWithRedirect$1;
declare const signOut: typeof signOut$1;
declare const unlink: typeof unlink$1;
declare const updateCurrentUser: typeof updateCurrentUser$1;
declare const updateEmail: typeof updateEmail$1;
declare const updatePassword: typeof updatePassword$1;
declare const updatePhoneNumber: typeof updatePhoneNumber$1;
declare const updateProfile: typeof updateProfile$1;
declare const useDeviceLanguage: typeof useDeviceLanguage$1;
declare const validatePassword: typeof validatePassword$1;
declare const verifyBeforeUpdateEmail: typeof verifyBeforeUpdateEmail$1;
declare const verifyPasswordResetCode: typeof verifyPasswordResetCode$1;

export { Auth, AuthInstances, AuthModule, applyActionCode, authInstance$, authState, beforeAuthStateChanged, checkActionCode, confirmPasswordReset, connectAuthEmulator, createUserWithEmailAndPassword, deleteUser, fetchSignInMethodsForEmail, getAdditionalUserInfo, getAuth, getIdToken, getIdTokenResult, getMultiFactorResolver, getRedirectResult, idToken, initializeAuth, initializeRecaptchaConfig, isSignInWithEmailLink, linkWithCredential, linkWithPhoneNumber, linkWithPopup, linkWithRedirect, onAuthStateChanged, onIdTokenChanged, parseActionCodeURL, provideAuth, reauthenticateWithCredential, reauthenticateWithPhoneNumber, reauthenticateWithPopup, reauthenticateWithRedirect, reload, revokeAccessToken, sendEmailVerification, sendPasswordResetEmail, sendSignInLinkToEmail, setPersistence, signInAnonymously, signInWithCredential, signInWithCustomToken, signInWithEmailAndPassword, signInWithEmailLink, signInWithPhoneNumber, signInWithPopup, signInWithRedirect, signOut, unlink, updateCurrentUser, updateEmail, updatePassword, updatePhoneNumber, updateProfile, useDeviceLanguage, user, validatePassword, verifyBeforeUpdateEmail, verifyPasswordResetCode };
