import * as rxjs from 'rxjs';
import { Firestore as Firestore$1, addDoc as addDoc$1, aggregateFieldEqual as aggregateFieldEqual$1, aggregateQuerySnapshotEqual as aggregateQuerySnapshotEqual$1, and as and$1, collection as collection$2, collectionGroup as collectionGroup$1, connectFirestoreEmulator as connectFirestoreEmulator$1, deleteDoc as deleteDoc$1, deleteField as deleteField$1, doc as doc$2, documentId as documentId$1, endAt as endAt$1, endBefore as endBefore$1, getAggregate as getAggregate$1, getCount as getCount$1, getDoc as getDoc$1, getDocs as getDocs$1, getFirestore as getFirestore$1, increment as increment$1, initializeFirestore as initializeFirestore$1, limit as limit$1, limitToLast as limitToLast$1, or as or$1, orderBy as orderBy$1, query as query$1, queryEqual as queryEqual$1, refEqual as refEqual$1, runTransaction as runTransaction$1, setDoc as setDoc$1, setLogLevel as setLogLevel$1, snapshotEqual as snapshotEqual$1, startAfter as startAfter$1, startAt as startAt$1, sum as sum$1, terminate as terminate$1, updateDoc as updateDoc$1, vector as vector$1, where as where$1, writeBatch as writeBatch$1 } from 'firebase/firestore/lite';
export * from 'firebase/firestore/lite';
import * as i0 from '@angular/core';
import { Injector, EnvironmentProviders } from '@angular/core';
import { collection as collection$1, collectionCount as collectionCount$1, collectionCountSnap as collectionCountSnap$1, collectionData as collectionData$1, doc as doc$1, docData as docData$1, fromRef as fromRef$1, snapToData as snapToData$1 } from 'rxfire/firestore/lite';

interface Firestore extends Firestore$1 {
}
declare class Firestore {
    constructor(firestore: Firestore$1);
}
interface FirestoreInstances extends Array<Firestore$1> {
}
declare class FirestoreInstances {
    constructor();
}
declare const firestoreInstance$: rxjs.Observable<Firestore$1>;

declare class FirestoreModule {
    constructor();
    static ɵfac: i0.ɵɵFactoryDeclaration<FirestoreModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<FirestoreModule, never, never, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<FirestoreModule>;
}
declare function provideFirestore(fn: (injector: Injector) => Firestore$1, ...deps: any[]): EnvironmentProviders;

declare const collectionSnapshots: typeof collection$1;
declare const collectionCount: typeof collectionCount$1;
declare const collectionCountSnap: typeof collectionCountSnap$1;
declare const collectionData: typeof collectionData$1;
declare const docSnapshots: typeof doc$1;
declare const docData: typeof docData$1;
declare const fromRef: typeof fromRef$1;
declare const snapToData: typeof snapToData$1;

declare const addDoc: typeof addDoc$1;
declare const aggregateFieldEqual: typeof aggregateFieldEqual$1;
declare const aggregateQuerySnapshotEqual: typeof aggregateQuerySnapshotEqual$1;
declare const and: typeof and$1;
declare const collection: typeof collection$2;
declare const collectionGroup: typeof collectionGroup$1;
declare const connectFirestoreEmulator: typeof connectFirestoreEmulator$1;
declare const deleteDoc: typeof deleteDoc$1;
declare const deleteField: typeof deleteField$1;
declare const doc: typeof doc$2;
declare const documentId: typeof documentId$1;
declare const endAt: typeof endAt$1;
declare const endBefore: typeof endBefore$1;
declare const getAggregate: typeof getAggregate$1;
declare const getCount: typeof getCount$1;
declare const getDoc: typeof getDoc$1;
declare const getDocs: typeof getDocs$1;
declare const getFirestore: typeof getFirestore$1;
declare const increment: typeof increment$1;
declare const initializeFirestore: typeof initializeFirestore$1;
declare const limit: typeof limit$1;
declare const limitToLast: typeof limitToLast$1;
declare const or: typeof or$1;
declare const orderBy: typeof orderBy$1;
declare const query: typeof query$1;
declare const queryEqual: typeof queryEqual$1;
declare const refEqual: typeof refEqual$1;
declare const runTransaction: typeof runTransaction$1;
declare const setDoc: typeof setDoc$1;
declare const setLogLevel: typeof setLogLevel$1;
declare const snapshotEqual: typeof snapshotEqual$1;
declare const startAfter: typeof startAfter$1;
declare const startAt: typeof startAt$1;
declare const sum: typeof sum$1;
declare const terminate: typeof terminate$1;
declare const updateDoc: typeof updateDoc$1;
declare const vector: typeof vector$1;
declare const where: typeof where$1;
declare const writeBatch: typeof writeBatch$1;

export { Firestore, FirestoreInstances, FirestoreModule, addDoc, aggregateFieldEqual, aggregateQuerySnapshotEqual, and, collection, collectionCount, collectionCountSnap, collectionData, collectionGroup, collectionSnapshots, connectFirestoreEmulator, deleteDoc, deleteField, doc, docData, docSnapshots, documentId, endAt, endBefore, firestoreInstance$, fromRef, getAggregate, getCount, getDoc, getDocs, getFirestore, increment, initializeFirestore, limit, limitToLast, or, orderBy, provideFirestore, query, queryEqual, refEqual, runTransaction, setDoc, setLogLevel, snapToData, snapshotEqual, startAfter, startAt, sum, terminate, updateDoc, vector, where, writeBatch };
