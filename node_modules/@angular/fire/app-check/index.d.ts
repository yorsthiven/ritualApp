import * as rxjs from 'rxjs';
import { AppCheck as AppCheck$1, getLimitedUseToken as getLimitedUseToken$1, getToken as getToken$1, initializeAppCheck as initializeAppCheck$1, onTokenChanged as onTokenChanged$1, setTokenAutoRefreshEnabled as setTokenAutoRefreshEnabled$1 } from 'firebase/app-check';
export * from 'firebase/app-check';
import * as i0 from '@angular/core';
import { Injector, EnvironmentProviders } from '@angular/core';

interface AppCheck extends AppCheck$1 {
}
declare class AppCheck {
    constructor(appCheck: AppCheck$1);
}
interface AppCheckInstances extends Array<AppCheck> {
}
declare class AppCheckInstances {
    constructor();
}
declare const appCheckInstance$: rxjs.Observable<AppCheck$1>;

declare class AppCheckModule {
    constructor();
    static ɵfac: i0.ɵɵFactoryDeclaration<AppCheckModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<AppCheckModule, never, never, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<AppCheckModule>;
}
declare function provideAppCheck(fn: (injector: Injector) => AppCheck$1, ...deps: any[]): EnvironmentProviders;

declare const getLimitedUseToken: typeof getLimitedUseToken$1;
declare const getToken: typeof getToken$1;
declare const initializeAppCheck: typeof initializeAppCheck$1;
declare const onTokenChanged: typeof onTokenChanged$1;
declare const setTokenAutoRefreshEnabled: typeof setTokenAutoRefreshEnabled$1;

export { AppCheck, AppCheckInstances, AppCheckModule, appCheckInstance$, getLimitedUseToken, getToken, initializeAppCheck, onTokenChanged, provideAppCheck, setTokenAutoRefreshEnabled };
