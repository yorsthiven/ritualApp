import * as rxjs from 'rxjs';
import { DataConnect, connectDataConnectEmulator as connectDataConnectEmulator$1, executeMutation as executeMutation$1, executeQuery as executeQuery$1, getDataConnect as getDataConnect$1, mutationRef as mutationRef$1, queryRef as queryRef$1, setLogLevel as setLogLevel$1, subscribe as subscribe$1, terminate as terminate$1, toQueryRef as toQueryRef$1 } from 'firebase/data-connect';
export * from 'firebase/data-connect';
export { DataConnect } from 'firebase/data-connect';
import * as i0 from '@angular/core';
import { Injector, EnvironmentProviders } from '@angular/core';

interface DataConnectInstances extends Array<DataConnect> {
}
declare class DataConnectInstances {
    constructor();
}
declare const dataConnectInstance$: rxjs.Observable<DataConnect>;

declare class DataConnectModule {
    constructor();
    static ɵfac: i0.ɵɵFactoryDeclaration<DataConnectModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DataConnectModule, never, never, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DataConnectModule>;
}
declare function provideDataConnect(fn: (injector: Injector) => DataConnect, ...deps: any[]): EnvironmentProviders;

declare const connectDataConnectEmulator: typeof connectDataConnectEmulator$1;
declare const executeMutation: typeof executeMutation$1;
declare const executeQuery: typeof executeQuery$1;
declare const getDataConnect: typeof getDataConnect$1;
declare const mutationRef: typeof mutationRef$1;
declare const queryRef: typeof queryRef$1;
declare const setLogLevel: typeof setLogLevel$1;
declare const subscribe: typeof subscribe$1;
declare const terminate: typeof terminate$1;
declare const toQueryRef: typeof toQueryRef$1;

export { DataConnectInstances, DataConnectModule, connectDataConnectEmulator, dataConnectInstance$, executeMutation, executeQuery, getDataConnect, mutationRef, provideDataConnect, queryRef, setLogLevel, subscribe, terminate, toQueryRef };
