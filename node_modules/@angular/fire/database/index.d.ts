import * as rxjs from 'rxjs';
import { Database as Database$1, child as child$1, connectDatabaseEmulator as connectDatabaseEmulator$1, enableLogging as enableLogging$1, endAt as endAt$1, endBefore as endBefore$1, equalTo as equalTo$1, forceLongPolling as forceLongPolling$1, forceWebSockets as forceWebSockets$1, get as get$1, getDatabase as getDatabase$1, goOffline as goOffline$1, goOnline as goOnline$1, increment as increment$1, limitToFirst as limitToFirst$1, limitToLast as limitToLast$1, off as off$1, onChildAdded as onChildAdded$1, onChildChanged as onChildChanged$1, onChildMoved as onChildMoved$1, onChildRemoved as onChildRemoved$1, onDisconnect as onDisconnect$1, onValue as onValue$1, orderByChild as orderByChild$1, orderByKey as orderByKey$1, orderByPriority as orderByPriority$1, orderByValue as orderByValue$1, push as push$1, query as query$1, ref as ref$1, refFromURL as refFromURL$1, remove as remove$1, runTransaction as runTransaction$1, set as set$1, setPriority as setPriority$1, setWithPriority as setWithPriority$1, startAfter as startAfter$1, startAt as startAt$1, update as update$1 } from 'firebase/database';
export * from 'firebase/database';
import * as i0 from '@angular/core';
import { Injector, EnvironmentProviders } from '@angular/core';
import { auditTrail as auditTrail$1, changeToData as changeToData$1, fromRef as fromRef$1, list as list$1, listVal as listVal$1, object as object$1, objectVal as objectVal$1, stateChanges as stateChanges$1 } from 'rxfire/database';
export { ListenEvent, ListenerMethods } from 'rxfire/database';

interface Database extends Database$1 {
}
declare class Database {
    constructor(database: Database$1);
}
interface DatabaseInstances extends Array<Database$1> {
}
declare class DatabaseInstances {
    constructor();
}
declare const databaseInstance$: rxjs.Observable<Database$1>;

declare class DatabaseModule {
    constructor();
    static ɵfac: i0.ɵɵFactoryDeclaration<DatabaseModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DatabaseModule, never, never, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DatabaseModule>;
}
declare function provideDatabase(fn: (injector: Injector) => Database$1, ...deps: any[]): EnvironmentProviders;

declare const auditTrail: typeof auditTrail$1;
declare const changeToData: typeof changeToData$1;
declare const fromRef: typeof fromRef$1;
declare const list: typeof list$1;
declare const listVal: typeof listVal$1;
declare const object: typeof object$1;
declare const objectVal: typeof objectVal$1;
declare const stateChanges: typeof stateChanges$1;

declare const child: typeof child$1;
declare const connectDatabaseEmulator: typeof connectDatabaseEmulator$1;
declare const enableLogging: typeof enableLogging$1;
declare const endAt: typeof endAt$1;
declare const endBefore: typeof endBefore$1;
declare const equalTo: typeof equalTo$1;
declare const forceLongPolling: typeof forceLongPolling$1;
declare const forceWebSockets: typeof forceWebSockets$1;
declare const get: typeof get$1;
declare const getDatabase: typeof getDatabase$1;
declare const goOffline: typeof goOffline$1;
declare const goOnline: typeof goOnline$1;
declare const increment: typeof increment$1;
declare const limitToFirst: typeof limitToFirst$1;
declare const limitToLast: typeof limitToLast$1;
declare const off: typeof off$1;
declare const onChildAdded: typeof onChildAdded$1;
declare const onChildChanged: typeof onChildChanged$1;
declare const onChildMoved: typeof onChildMoved$1;
declare const onChildRemoved: typeof onChildRemoved$1;
declare const onDisconnect: typeof onDisconnect$1;
declare const onValue: typeof onValue$1;
declare const orderByChild: typeof orderByChild$1;
declare const orderByKey: typeof orderByKey$1;
declare const orderByPriority: typeof orderByPriority$1;
declare const orderByValue: typeof orderByValue$1;
declare const push: typeof push$1;
declare const query: typeof query$1;
declare const ref: typeof ref$1;
declare const refFromURL: typeof refFromURL$1;
declare const remove: typeof remove$1;
declare const runTransaction: typeof runTransaction$1;
declare const set: typeof set$1;
declare const setPriority: typeof setPriority$1;
declare const setWithPriority: typeof setWithPriority$1;
declare const startAfter: typeof startAfter$1;
declare const startAt: typeof startAt$1;
declare const update: typeof update$1;

export { Database, DatabaseInstances, DatabaseModule, auditTrail, changeToData, child, connectDatabaseEmulator, databaseInstance$, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, fromRef, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, list, listVal, object, objectVal, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, provideDatabase, push, query, ref, refFromURL, remove, runTransaction, set, setPriority, setWithPriority, startAfter, startAt, stateChanges, update };
